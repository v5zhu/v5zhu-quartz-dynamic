<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns="http://www.springframework.org/schema/beans" xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
		http://www.springframework.org/schema/context
		http://www.springframework.org/schema/context/spring-context-3.2.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd"
       default-lazy-init="true">

    <description>Spring公共配置</description>

    <!-- 该 BeanPostProcessor 将自动对标注 @Autowired 的 Bean 进行注入 -->
    <context:annotation-config/>

    <!-- 使用annotation 自动注册bean, 并保证@Required、@Autowired的属性被注入 -->
    <context:component-scan base-package="com.v5zhu.quartz.api"/>

    <!--<bean id="jedisConnectionFactory"-->
    <!--class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory"-->
    <!--p:hostName="${redis.ip}" p:port="${redis.port}" p:usePool="true"/>-->

    <!--<bean id="jdbcTemplate"-->
    <!--class="org.springframework.jdbc.core.JdbcTemplate">-->
    <!--<property name="dataSource" ref="dataSource"/>-->
    <!--</bean>-->

    <!--<bean id="stringRedisTemplate" class="org.springframework.data.redis.core.StringRedisTemplate"-->
    <!--p:connectionFactory-ref="jedisConnectionFactory"/>-->
    <!--<property appName="hostName" value="${redis.host}"/> -->
    <!--<property appName="port" value="${redis.port}"/> -->
    <!-- <property appName="password" value="${redis.password}" /> -->
    <!--<property appName="usePool" value="${redis.password}" /> -->
    <!--p:use-pool="true"/> -->
    <!--mongodb -->
    <!--<bean id="mongoTemplate" class="org.springframework.data.mongodb.core.MongoTemplate"> -->
    <!--<constructor-arg appName="mongoDbFactory" ref="mongoDbFactory"/> -->
    <!--</bean> -->
    <!--<mongo:db-factory id="mongoDbFactory" dbname="${mongo.dbName}" username="${mongo.username}" -->
    <!--password="" mongo-ref="mongo"/> -->

    <!-- Spring Data Jpa配置 -->
    <!--<jpa:repositories base-package="com.changhong.open.app.dao.repository,com.changhong.open.user.dao.repository"-->
    <!--transaction-manager-ref="transactionManager"-->
    <!--entity-manager-factory-ref="entityManagerFactory"/>-->
    <!-- MyBatis配置 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="configLocation" value="classpath:MyBatisConfiguration.xml"/>
        <!-- 自动扫描entity目录, 省掉Configuration.xml里的手工配置 -->
        <property name="typeAliasesPackage" value="com.v5zhu.quartz.api.domain"/>
        <!-- 显式指定Mapper文件位置 -->
        <property name="mapperLocations" value="classpath:/mybatis/*Mapper.xml"/>
    </bean>
    <!-- 扫描basePackage下所有以@MyBatisRepository标识的 接口 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.v5zhu.quartz.api.dao"/>
        <property name="annotationClass"
                  value="com.v5zhu.quartz.api.dao.commons.MyBatisRepository"/>
    </bean>

    <bean id="transactionManager" name="transactionManager"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource">
            <ref bean="dataSource"/>
        </property>
    </bean>

    <tx:advice id="transactionAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="*" propagation="REQUIRED" rollback-for="Exception"/>
        </tx:attributes>
    </tx:advice>
    <aop:config proxy-target-class="true">
        <aop:pointcut id="transactionPointcut"
                      expression="execution(* com.v5zhu.quartz.api.service.*.*(..))"/>
        <aop:advisor pointcut-ref="transactionPointcut"
                     advice-ref="transactionAdvice"/>
    </aop:config>
    <bean id="springUtils" class="com.v5zhu.quartz.support.spring.SpringUtils"/>


    <bean id="schedulerFactoryBean"
          class="org.springframework.scheduling.quartz.SchedulerFactoryBean"/>
    <!-- JSR303 Validator定义 -->
    <bean id="validator"
          class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean"/>


    <!-- local development环境 -->
    <beans profile="development">
        <context:property-placeholder
                ignore-resource-not-found="true"
                location="classpath*:/application.development.properties"/>
        <bean name="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
              init-method="init" destroy-method="close">
            <property name="driverClassName" value="${jdbc.driver}"/>
            <property name="url" value="${jdbc.url}"/>
            <property name="username" value="${jdbc.username}"/>
            <property name="password" value="${jdbc.password}"/>

            <!-- 初始化连接大小 -->
            <property name="initialSize" value="5"/>
            <!-- 连接池最大使用连接数量 -->
            <property name="maxActive" value="50"/>
            <!-- 连接池最大空闲 该参数已废弃 -->
            <!-- property name="maxIdle" value="20" / -->
            <!-- 连接池最小空闲 -->
            <property name="minIdle" value="1"/>
            <!-- 获取连接最大等待时间 -->
            <property name="maxWait" value="60000"/>

            <!-- <property name="poolPreparedStatements" value="true" /> <property
                name="maxPoolPreparedStatementPerConnectionSize" value="33" /> -->

            <property name="validationQuery" value="${validationQuery}"/>
            <property name="testOnBorrow" value="false"/>
            <property name="testOnReturn" value="false"/>
            <property name="testWhileIdle" value="true"/>

            <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
            <property name="timeBetweenEvictionRunsMillis" value="60000"/>
            <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
            <property name="minEvictableIdleTimeMillis" value="25200000"/>

            <!-- 打开removeAbandoned功能 -->
            <property name="removeAbandoned" value="true"/>
            <!-- 1800秒，也就是30分钟 -->
            <property name="removeAbandonedTimeout" value="1800"/>
            <!-- 关闭abanded连接时输出错误日志 -->
            <property name="logAbandoned" value="true"/>

            <!-- 监控数据库 -->
            <!-- <property name="filters" value="stat" /> -->
            <property name="filters" value="mergeStat,wall"/>
        </bean>
    </beans>

</beans>